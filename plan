### Система блогов ###

## Фронтенд ##

# Ожидается получить #
1. Статьи
    1.1. Список статей - категория статьи > имя. Ниже текст, потом рейтинг, дата и количество комментариев
    1.2. На странице статьи все то же самое, только текст полный
    1.3. Добавить статью может только зарегистрированный. В общем списке статья показывается только после премодерации. При добавлении обязательно создать запись в таблице article_rating
2. Комментарии
    2.1. Форма добавления: незарег - имя, текст, капча; через соцсети - текст; зарег - только текст
    2.2. Отображаются комментарии под формой с последнего до первого. Постраничная навигация или подгрузка - решить потом
3. Рейтинг
    3.1. Каждая статья имеет рейтинг, который равен разнице между хорошими и плохими голосами (good-bad).
    3.2. Проголосовать может только зарегистрированный и только один раз. Для этого создать таблицу, в которую заносить информацию о том, кто и за что проголосовал. (статья-логин)
4. Рубрики
    4.1. Есть два списка - трехуровневый и линейный. Статье нужно присвоить рубрику от каждого из списков.
5. Пользователи
    5.1. Незарегистрированный
        5.1.1. Может только просматривать статьи и комментировать их (с капчей)
    5.2. Авторизованный через соцсети
        5.2.1. Может просматривать статьи и комментировать без капчи и без ввода имени. При регистрации такого, заполнить форму с данными из соцсети
    5.3. Зарегистрированный
        5.3.1. Может еще добавлять статьи.
    5.4. Профиль зарегистрированного
        5.4.1. Помимо стандартных данных отображать вкладки с его комментариями и статьями (подтвержденными и не только).

# Реализация #
Структура БД
blog-system
    articles
        int `id` primary auto_increment ID статьи
        char(50) `author` Логин автора статьи
        char(200) `name` Имя статьи
        text `preview` Превью статьи (будет отображаться в списке)
        longtext `full` Остальной текст статьи
        timestamp `date` Время добавления статьи
        int `category1` Рубрика статьи из первого списка
        int `category2` Рубрика статьи из второго списка
        boolean `confirmed` Подтверждена ли статья?
        boolean `judgen` Осуждена ли статья?

    comments
        int `id` primary auto_increment ID комментария
        char(50) `author` Имя комментатора
        text `text` Текст комментария
        int `parent` default '0' Комментарий, на который является ответом этот. По умолчанию 0, значит, что комментарий не является ответом

    rating
        int `id` primary ID статьи
        int `good` Количество плюсов
        int `bad` Количество минусов

    voters
        string `login` Логин проголосовавшего
        int `article` ID статьи, за которую он проголосовал

    categories
        int `id` primary auto_increment ID рубрики
        char(200) `name` Имя рубрики
        int `parent` Родительская рубрика
        Прим.: сразу будут добавлены рубрики с ID 1 и 2 - первый и второй список соответственно

    complaints
        int `id` primary auto_increment ID жалобы
        char(50) `author` Автор жалобы
        char(150) `email` Email автора
        text `text` Текст жалобы

    users
        char(50) `login` primary Логин пользователя
        text `password` Хеш пароля
        char(150) `email` primary EMail пользователя
        char(50) `group` Группа пользователя. Может быть user или admin. При необходимости можно будет добавить группу moderator
        datetime `blocked_until` Если пользователь заблокирован, то здесь будет выводиться дата разблокировки.

Модули:
articles.module.php
    Articles::get(int $page Страница навигации[, int $category ID категории])
    Метод подгружает статьи с их краткими описаниями для текущей страницы. Загружаются с конца. Если дана рубрика, то загрузит статьи для нее

    Articles::navigation(int $page Страница навигации)
    Метод вернет строку с постраничной навигацией по статьям.

article.module.php
    Article::get(int $id ID статьи)
    Метод вернет массив с данными статьи: дерево категории, имя, полный текст, рейтинг

    Article::add(string $name Имя статьи, string $text Текст статьи, int $category1 Рубрика первого списка, int $category2 Рубрика второго списка)
    Метод добавит статью. Логин автора будет взят автоматически. Существование всех рубрик будет проверено

    Article::complain(int $id ID статьи, string $name Имя жалобщика, string $email Его email, string $text Текст жалобы)
    Добавит жалобу на статью

comments.module.php
    Comments::count(int $id ID статьи)
    Вернет количество комментариев для днной статьи

    Comments::get(int $id ID статьи, int $page Номер страницы навигации)
    Вернет комментарии для данной статьи.

    Comments::send(int $article ID статьи, string $name Имя комментатора, string $text Текст комментария[, int $parent ID комментария, на который ответили])
    Добавит комментарий для данной статьи. Если дан параметр $parent, значит комментарий является ответом. Проверить, чтобы "родительский" комментарий принадлежал этой статье и добавить его. по умолчанию родитель - 0

categories.module.php
    Categories::get(int $parent ID родительской рубрики)
    Вернет потомков данной рубрики. Планируется, что ID 1 будет присвоен первому списку, а ID 2 - второму. Таким образом Categories::get(1) вернет рубрики первого уровня из первого списка, а Categories::get(2) вернет весь второй список.

    Categories::tree(int $id ID статьи)
    Метод вернет дерево категорий для данной статьи

    Categories::name(int $id ID рубрики)
    Вернет имя рубрики с таким ID. Нужно для списка статей.

rating.module.php
    Rating::get(int $id ID статьи)
    Метод вернет рейтинг статьи

    Rating::vote(int $id ID статьи, string $voice Голос)
    $voice должен быть good или bad. Соответствующее поле в таблице rating для данной статьи увеличится на одну позицию

users.module.php
    User::register(string $login Логин, string $password Пароль, string $email Email)
    Добавит пользователя в базу и автоматически авторизует его

    User::authorize()
    Метод сам будет проверять, если данные POST для авторизации или пользователь уже авторизован и его данные есть в сессии. Также в POST параметрах он будет проверять метод авторизации: normal или через соцсети

    User::getInfo([string $login Логин пользователя])
    Вернет данные пользователя. Если вызвать метод без параметров, то вернется информация о текущем пользователе.

    User::changePassword(string $old Старый пароль, string $new Новый пароль)
    Метод проверит правильность старого пароля и заменит его на новый

    User::recoveryPassword(string $key Ключ восстановления, string $login Логин, string $new Новый пароль)
    Метод проверит правильность ключа восстановления (сгенерирован ранее) и заменить старый пароль на новый

    User::recoveryKey(string $login Логин)
    Метод сгенерирует ключ восстановления и внесет его в базу. С его помощью можно восстановить пароль

    User::verificationKey(string $login Логин)
    Отправит ключ подтверждения на почту, а также внесет его в БД

    User::verifyEmail(string $login Логин, string $key Ключ подтверждения)
    Изменит статус аккаунта на подтвержденный, если ключи будут совпадать

Страницы:
statji.php
    Страница будет выводить список статей. Если передать ей GET параметр category, то загрузит статьи для категории, а если GET параметр user то статьи для пользователя

statja.php
    Страница будет выводить статью со всей ее информацией (кроме комментариев)

kommentarii.php
    Страницы будет выводить комментарии для статьи. В отдельный скрипт она вынесена потому что комментарии будут подгружаться через AJAX

kommentirovatj.php
    Страница для отправки комментария. Будет вызываться через AJAX

golosovatj.php
    Страница будет изменять рейтинг статьи и возвращать новый в формате JSON

rubriki.php
    Страница будет выводить рубрики.

profilj.php
    Профиль пользователя

registratsija.php
    Страница будет выводить форму регистрации. Если она увидит POST данные пользователя, то зарегистрирует его. Планируется отправлять POST данные через AJAX

avtorizatsija.php
    Скрипт будет авторизовывать пользователя. Данные отправлять ему надо будет через AJAX

zhaloba.php
    Скрипт будет выводить форму жалобы на статью и добавлять жалобу, если увидит нужные данные

dobavitj-statju.php
    Скрипт будет выводить форму добавления статьи. Если увидит нужные данные, то будет добавлять статью