### Система блогов ###

## Фронтенд ##

# Ожидается получить #
1. Статьи
    1.1. Список статей - категория статьи > имя. Ниже текст, потом рейтинг, дата и количество комментариев
    1.2. На странице статьи все то же самое, только текст полный
    1.3. Добавить статью может только зарегистрированный. В общем списке статья показывается только после премодерации. При добавлении обязательно создать запись в таблице article_rating
2. Комментарии
    2.1. Форма добавления: незарег - имя, текст, капча; через соцсети - текст; зарег - только текст
    2.2. Отображаются комментарии под формой с последнего до первого. Постраничная навигация или подгрузка - решить потом
3. Рейтинг
    3.1. Каждая статья имеет рейтинг, который равен разнице между хорошими и плохими голосами (good-bad).
    3.2. Проголосовать может только зарегистрированный и только один раз. Для этого создать таблицу, в которую заносить информацию о том, кто и за что проголосовал. (статья-логин)
4. Рубрики
    4.1. Есть два списка - трехуровневый и линейный. Статье нужно присвоить рубрику от каждого из списков.
5. Пользователи
    5.1. Незарегистрированный
        5.1.1. Может только просматривать статьи и комментировать их (с капчей)
    5.2. Авторизованный через соцсети
        5.2.1. Может просматривать статьи и комментировать без капчи и без ввода имени. При регистрации такого, заполнить форму с данными из соцсети
    5.3. Зарегистрированный
        5.3.1. Может еще добавлять статьи.
    5.4. Профиль зарегистрированного
        5.4.1. Помимо стандартных данных отображать вкладки с его комментариями и статьями (подтвержденными и не только).

# Реализация #
Структура БД
blog-system
    articles
        int `id` primary auto_increment ID статьи
        int `author_id` index ID автора статьи
        char(64) `name` Имя статьи
        char(128) `preview` Превью статьи (будет отображаться в списке)
        text `full` Остальной текст статьи
        timestamp `date` Время добавления статьи
        int `category1` index Рубрика статьи из первого списка
        int `category2` index Рубрика статьи из второго списка
        int `good_voices` Количество плюсов
        int `bad_voices` Количество минусов
        boolean `confirmed` index Подтверждена ли статья?
        boolean `judged` Осуждена ли статья?

    comments
        int `id` primary auto_increment ID комментария
        int `author_id` index ID комментатора
        boolean `author_registered` Является ли автор комментария зарегистрированным пользователем. Нужно для того, чтобы знать, откуда брать никнейм.
        int `article_id` index ID статьи
        char(255) `text` Текст комментария

    voters
        int `user_id` ID проголосовавшего
        int `article_id` ID статьи, за которую он проголосовал
        char(4) `voice` Хороший или плохой голос оставил пользователь

    categories
        int `id` primary auto_increment ID рубрики
        char(100) `name` Имя рубрики
        int `parent` index Родительская рубрика
        Прим.: сразу будут добавлены рубрики с ID 1 и 2 - первый и второй список соответственно

    complaints
        int `id` primary auto_increment ID жалобы
        int `article_id` index ID статьи, на которую оставлена жалоба
        int `author_name` Автор жалобы
        char(100) `email` Email автора
        char(255) `text` Текст жалобы

    users
        int `id` primary auto_increment
        char(150) `email` unique EMail пользователя
        text `password` Хеш пароля
        char(16) `nickname` unique Никнейм пользователя
        char(50) `group` Группа пользователя. Может быть user или admin. При необходимости можно будет добавить группу moderator
        datetime `blocked_until` Если пользователь заблокирован, то здесь будет выводиться дата разблокировки.

    unregistered_commentors
        int `id` primary auto_increment
        char(16) `name` Имя комментатора

Модули:
system.module.php
    inviTemplater - Шаблонизатор

    config_get - Добывание значений из конфига

    inviException - Расширенная библиотека для работы с исключениями.

    inviPDO - Расширенный PDO

    DB - класс для того, чтобы не пришлось каждый раз создавать новое подключение у БД
    DB::$DBH - объект inviPDO
    DB::connect() - создает объект inviPDO и "засовывает" его в DB::$DBH

    User::register(string $email Email пользователя, string $password Пароль, string $nickname Никнейм)
    Добавляет пользователя в базу, если в ней еще нету пользователя с таким email'ом или никнеймом. После этого автоматически авторизует его

    User::authorize()
    Вызывается без параметров. Метод сам проверяет наличие данных пользователя в сессии или POST переменных и выбирает, что делать дальше

    User::get([int $id ID пользователя])
    Если метод вызвать без параметров, то вернутся данные текущег пользователя в массиве. Если указать ему ID пользователя, то вернет данные с этим ID

    User::changePassword(string $old Старый пароль, string $new Новый пароль)
    Меняет старый пароль на новый в случае совпадения первого с тем, который в БД

    Bcrypt - класс для шифрования

blog.module.php
    Articles::get(int $page Страница навигации[, int $category ID категории])
    Метод подгружает статьи с их краткими описаниями для текущей страницы. Загружаются с конца. Если дана рубрика, то загрузит статьи для нее

    Articles::navigation(int $page Страница навигации)
    Метод вернет строку с постраничной навигацией по статьям.

    Article::get(int $id ID статьи)
    Метод вернет массив с данными статьи: дерево категории, имя, полный текст, рейтинг

    Article::rating(int $id ID статьи, [string $type Вернуть количество каких голосов])
    По умолчанию вернет общий рейтинг статьи (разницу между количеством хороших и плохих голосов). Если указать необязательный параметр $type, то вернет количество указанных голосов (good или bad)

    Article::vote(int $id ID статьи, string $type Тип голоса)
    Увеличит в базе колчество голосов указанного типа на 1

    Article::add(string $name Имя статьи, string $text Текст статьи, int $category1 Рубрика первого списка, int $category2 Рубрика второго списка)
    Метод добавит статью. Логин автора будет взят автоматически. Существование всех рубрик будет проверено

    Article::complain(int $id ID статьи, string $name Имя жалобщика, string $email Его email, string $text Текст жалобы)
    Добавит жалобу на статью

    Comments::count(int $id ID статьи)
    Вернет количество комментариев для днной статьи

    Comments::get(int $id ID статьи, int $page Номер страницы навигации)
    Вернет комментарии для данной статьи.

    Comments::send(int $article ID статьи, string $name Имя комментатора, string $text Текст комментария[, int $parent ID комментария, на который ответили])
    Добавит комментарий для данной статьи. Если дан параметр $parent, значит комментарий является ответом. Проверить, чтобы "родительский" комментарий принадлежал этой статье и добавить его. по умолчанию родитель - 0

    Categories::get(int $parent ID родительской рубрики)
    Вернет потомков данной рубрики. Планируется, что ID 1 будет присвоен первому списку, а ID 2 - второму. Таким образом Categories::get(1) вернет рубрики первого уровня из первого списка, а Categories::get(2) вернет весь второй список.

    Categories::trace(int $id ID статьи)
    Метод вернет дерево категорий для данной статьи

    Categories::name(int $id ID рубрики)
    Вернет имя рубрики с таким ID. Нужно для списка статей.

Страницы:
spisok.php
    Страница будет выводить список статей. Если передать GET параметр cat, то загрузит статьи для данной рубрики в соответствующем шаблоне. Если передать параметр user, то выведет статьи ползователя

statja.php
    Страница будет выводить статью со всей ее информацией кроме комментариев. Комментарии будут подгружаться позже через AJAX

kommentarii.php
    Страницы будет выводить комментарии для статьи. В отдельный скрипт она вынесена потому что комментарии будут подгружаться через AJAX

kommentirovatj.php
    Страница для отправки комментария. Будет вызываться через AJAX

golosovatj.php
    Страница будет изменять рейтинг статьи и возвращать новый в формате JSON

rubriki.php
    Страница будет выводить рубрики.

profilj.php
    Профиль пользователя

registratsija.php
    Страница будет выводить форму регистрации. Если она увидит POST данные пользователя, то зарегистрирует его. Планируется отправлять POST данные через AJAX

avtorizatsija.php
    Скрипт будет авторизовывать пользователя. Данные отправлять ему надо будет через AJAX

zhaloba.php
    Скрипт будет выводить форму жалобы на статью и добавлять жалобу, если увидит нужные данные

dobavitj-statju.php
    Скрипт будет выводить форму добавления статьи. Если увидит нужные данные, то будет добавлять статью

Временные страницы
rubriki.php
    Управление рубриками. Можно будет добавить рубрику как в первый, так и во второй список.